"use strict";

function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
            return typeof obj;
        };
    } else {
        _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
    }
    return _typeof(obj);
}

function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}

function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
            });
        } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
            ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
        }
    }
    return target;
}

function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}

var debug = require('@wix/debug-no-namespace');

var resolve = require('./name-resolver');

var enableNamespace = require('./enable-namespace');

var assert = require('assert');

var jsonStringifySafe = require('json-stringify-safe'); // emit deprecation warning if used on server side


try {
    if (process && process.emitWarning && process.env && process.env.APP_CONF_DIR) {
        process.emitWarning('@wix/wix-debug is deprecated in server bootstrap projects. use @wix/wix-log instead', 'DeprecationWarning');
    }
} catch (err) { // ignore
}

var DebugLogger = /*#__PURE__*/ function() {
    function DebugLogger(name) {
        var _this = this;

        var requestData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, DebugLogger);

        assert(name, 'Name must be provided');
        this._requestData = requestData;
        this._name = name;
        var logKeys = resolve(name);
        this._namespace = logKeys['error'];
        debug.enable(enableNamespace(process.env['DEBUG'], this._namespace));
        ['info', 'debug', 'error', 'trace', 'warn'].forEach(function(level) {
            var levelNamespace = logKeys[level];
            _this["_".concat(level)] = logWith(cachedLogger(levelNamespace), _this._requestData, levelNamespace, level);
        });
    }

    _createClass(DebugLogger, [{
        key: "withRequest",
        value: function withRequest(req) {
            return this.withAspects(req.aspects);
        }
    }, {
        key: "withAspects",
        value: function withAspects(aspects) {
            var requestId = get(aspects, 'raw.inbound.x-wix-request-id');
            return new DebugLogger(this._name, _objectSpread(_objectSpread({}, requestId ? {
                requestId: requestId
            } : {
                requestId: undefined
            }), this._requestData));
        }
    }, {
        key: "trace",
        value: function trace() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            this._trace(args);
        }
    }, {
        key: "debug",
        value: function debug() {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
            }

            this._debug(args);
        }
    }, {
        key: "info",
        value: function info() {
            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
            }

            this._info(args);
        }
    }, {
        key: "error",
        value: function error() {
            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                args[_key4] = arguments[_key4];
            }

            this._error(args);
        }
    }, {
        key: "warn",
        value: function warn() {
            for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                args[_key5] = arguments[_key5];
            }

            this._warn(args);
        }
    }]);

    return DebugLogger;
}();

function toKeyValueStringPairs(requestData) {
    return Object.keys(requestData).map(function(key) {
        return "[".concat(key, ": ").concat(requestData[key], "]");
    });
}

function isJsonEnabled() {
    return process.env['JSON_STDOUT'] === 'enabled';
}

var LOGGERS = new Map();

function cachedLogger(key) {
    var logger = LOGGERS.get(key);

    if (!logger) {
        logger = debug(key);
        LOGGERS.set(key, logger);
    }

    return logger;
}

function logWith(logger, requestData, namespace, level) {
    if (isJsonEnabled()) {
        return function(argsArray) {
            if (argsArray.length > 1) {
                argsArray = argsArray.map(function(arg) {
                    return arg instanceof Error ? errorToObject(arg) : arg;
                });

                if (argsArray.every(function(item) {
                        return _typeof(item) !== 'object';
                    })) {
                    argsArray = [argsArray.join(',')];
                } else {
                    argsArray = [jsonStringifySafe(argsArray)];
                }
            }

            return logger.apply(logger, argsArray.map(function(el) {
                return debug.coerce(toJson(el, namespace, requestData, level));
            }));
        };
    }

    return function(argsArray) {
        return logger.apply(logger, toKeyValueStringPairs(requestData).concat(argsArray).map(function(el) {
            return debug.coerce(el);
        }));
    };
}

function toJson(param, namespace, requestData, level) {
    var _appName = process.env['APP_NAME'] || 'APP_NAME_NOT_SET';

    var _hostName = process.env['HOSTNAME'] || 'HOSTNAME_NOT_SET';

    var _dc = process.env['DC_NAME'] || 'DC_NOT_SET';

    var _shortAppName = process.env['SHORT_APP_NAME'] || 'SHORT_APP_NAME_NOT_SET';

    var additionalParams = {
        _appName: _appName,
        _hostName: _hostName,
        _dc: _dc,
        _shortAppName: _shortAppName,
        _namespace: namespace,
        _requestData: toKeyValueStringPairs(requestData),
        wnp_requestId: requestData.requestId,
        request_id: requestData.requestId,
        wnp_namespace: namespace,
        timestamp: new Date().toISOString(),
        level: level.toUpperCase()
    };

    if (param instanceof Object) {
        if (Array.isArray(param)) {
            return jsonStringifySafe(_objectSpread(_objectSpread({}, additionalParams), {}, {
                text: jsonStringifySafe(param)
            }));
        }

        if (param instanceof Error) {
            return jsonStringifySafe(_objectSpread(_objectSpread({}, additionalParams), errorToObject(param)));
        }

        if (param._appName || param._hostName || param._dc || param._shortAppName || param._namespace || param._requestData || param.timestamp || Object.keys(param).find(function(k) {
                return k.startsWith('wnp_');
            })) {
            return jsonStringifySafe(_objectSpread(_objectSpread({}, additionalParams), {}, {
                data: param,
                error: {
                    message: 'Please don\'t use \'_appName\', \'_hostName\', \'_dc\', \'_shortAppName\', \'_namespace\', \'_requestData\', \'timestamp\' and params starting with \'wnp_\' in your JSON payload!'
                }
            }));
        }

        return jsonStringifySafe(_objectSpread(_objectSpread({}, additionalParams), param));
    }

    return jsonStringifySafe(_objectSpread(_objectSpread({}, additionalParams), {}, {
        text: param
    }));
}

function errorToObject(err) {
    return {
        errorData: {
            message: err.message,
            name: err.name,
            stack: err.stack
        },
        message: err.message
    };
}

function get(obj, path) {
    var parts = path.split('.');
    var result = obj;

    while (result !== undefined && parts.length > 0) {
        result = result[parts.shift()];
    }

    return result;
}

module.exports = function(name) {
    return new DebugLogger(name);
};

module.exports.Logger = DebugLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,