var absoluteUrlRegex = /^https?:\/\/|^\/\//i;
var protocolExpression = /^[a-z][a-z0-9.+-]*$/i;

var trimSlashes = function trimSlashes(str) {
    return str.replace(/^\/|\/$/g, '');
};

export var isRelativeUrl = function isRelativeUrl(url) {
    return !absoluteUrlRegex.test(url);
};
export var getWindowLocationOrigin = function getWindowLocationOrigin() {
    var location = typeof self !== 'undefined' && self.location;
    return location ? extractOrigin(location) : '';
};
export var escapeRegExp = function escapeRegExp(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
}; // eslint-disable-line no-useless-escape

export function isReqToOriginDomain(url, maybeBaseUrl) {
    var isUrlRelative = isRelativeUrl(url);
    var isBaseUrlAbsolute = maybeBaseUrl && absoluteUrlRegex.test(maybeBaseUrl);

    if (isUrlRelative && !isBaseUrlAbsolute) {
        return true;
    }

    var origin = getWindowLocationOrigin();

    if (!origin) {
        return false;
    }

    var originMatchRegex = new RegExp('^' + escapeRegExp(origin));
    var reqDomain = !isUrlRelative ? url : maybeBaseUrl;
    return originMatchRegex.test(reqDomain);
}
export var joinPath = function joinPath() {
    var joinedPath = '';

    for (var _len = arguments.length, pathParts = new Array(_len), _key = 0; _key < _len; _key++) {
        pathParts[_key] = arguments[_key];
    }

    pathParts.forEach(function(pathPart) {
        var pathPartWithoutSlashes = pathPart && trimSlashes(pathPart);

        if (pathPartWithoutSlashes) {
            var separator = joinedPath && '/';
            var prefix = joinedPath === '' && /^\//.test(pathPart) ? '/' : '';
            joinedPath = "" + prefix + joinedPath + separator + pathPartWithoutSlashes;
        }
    });
    var lastPart = pathParts[pathParts.length - 1];

    if (lastPart[lastPart.length - 1] === '/') {
        joinedPath += '/';
    }

    return joinedPath;
};
export var extractOrigin = function extractOrigin(location, extendedProtocolSeperator) {
    if (extendedProtocolSeperator === void 0) {
        extendedProtocolSeperator = false;
    }

    var protocolSeparator = extendedProtocolSeperator ? '://' : '//';
    var protocol = location.protocol,
        hostname = location.hostname,
        port = location.port;
    var host = hostname + (port ? ':' + port : '');
    var origin = [protocol, host].join(protocolSeparator);
    return location.origin || origin;
};
export var extractQueryParam = function extractQueryParam(location, queryParam) {
    var queryParams = decodeURI(location.search);
    var keyValuePairs = queryParams.replace('?', '').split('&').map(function(param) {
        return param.split('=');
    }).filter(function(_ref) {
        var key = _ref[0];
        return key === queryParam;
    });

    if (keyValuePairs.length > 0) {
        return keyValuePairs[0][1];
    }
};

var parseHost = function parseHost(string, parts) {
    string = string.replace(/\\/g, '/'); // extract host:port

    var pos = string.indexOf('/');

    if (pos === -1) {
        pos = string.length;
    }

    var t = string.substring(0, pos).split(':');
    parts.hostname = t[0] || null;
    parts.port = t[1] || null;

    if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
        pos++;
        string = '/' + string;
    }

    return string.substring(pos) || '/';
};

export var parseUrl = function parseUrl(string) {
    var parts = {};
    var pos; // extract fragment

    pos = string.indexOf('#');

    if (pos > -1) {
        parts.fragment = string.substring(pos + 1) || null;
        string = string.substring(0, pos);
    } // extract query


    pos = string.indexOf('?');

    if (pos > -1) {
        parts.query = string.substring(pos + 1) || null;
        string = string.substring(0, pos);
    }

    if (string.substring(0, 2) === '//') {
        // relative-scheme
        parts.protocol = null;
        string = string.substring(2); // extract "user:pass@host:port"

        string = parseHost(string, parts);
    } else {
        pos = string.indexOf(':');

        if (pos > -1) {
            parts.protocol = string.substring(0, pos) || null;

            if (parts.protocol && !parts.protocol.match(protocolExpression)) {
                // : may be within the path
                parts.protocol = undefined;
            } else if (string.substring(pos + 1, pos + 3) === '//') {
                string = string.substring(pos + 3); // extract "user:pass@host:port"

                string = parseHost(string, parts);
            } else {
                string = string.substring(pos + 1);
            }
        }
    }

    parts.path = string;
    return parts;
};